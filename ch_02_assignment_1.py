# -*- coding: utf-8 -*-
"""Ch.02 Assignment 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PbQrkv7vLd8q2NR5-wdWv5MqZoWGZuUq
"""

import numpy as np
import numpy.linalg as npl
import pandas as pd
import sympy
from sympy import *
from IPython.core.interactiveshell import InteractiveShell

InteractiveShell.ast_node_interactivity = "all"

"""### 2.5 a"""

M = Matrix([[1,1,-1,-1,1],[2,5,-7,-5, -2],[2,-1,1,3,4],[5,2,-4,2,6]])
M

M_rref = M.rref()
M_rref

"""This is the RREF of the augmented matrix and shows that there is no solution to the linear system.

### 2.5 b
"""

mat=Matrix([[1,-1,0,0,1,3],[1,1,0,-3,0,6],[2,-1,0,1,-1,5],[-1,2,0,-2,-1,-1]])
mat.rref()

"""Thus the solution set is p + nul(A) = p + span(h1,h2). p=[3,0,-1,0]^T, the final column of the RREF of the augmented matrix. h1 = column 3 of the minus 1 extended coefficient matrix, h2 column 5 of the minus 1 extended coefficient matrix (the columns corresponding to the free variables). h1 = [0,0,-1,0,0]^T h2 = [-1, -2,0,-1,-1]^T

### 2.6
"""

mat=Matrix([[0,1,0,0,1,0,2],[0,0,0,1,1,0,-1],[0,1,0,0,0,1,1]])
mat.rref()

"""This is the RREF of the augmented matrix which shows the solution which is the last column of the augmented matrix p=[1,-2,1]^T

## 2.8 a
"""

mat=Matrix([[2,3,4],[3,4,5],[4,5,6]])
mat.rref()

"""Since the matrix does not row reduce down to the identity matrix, then it is not invertible

### 2.8 b
"""

mat=Matrix([[1,0,1,0],[0,1,1,0],[1,1,0,1],[1,1,1,0]])
mat.inv()
mat.rref()

"""The matrix is invertible because simpy returns an inverse and the matrix row reduces into the identity matrix. So this matrix is invertible.

### 2.10 a
"""

mat=Matrix([[2,-1,3],[1,1,-2],[3,-3,8]])
mat.transpose()
(mat.transpose()).rref()

"""The RREF of the matrix has 2 pivot points out of the 3 total columns which shows that the set of vectors are linearly dependent

### 2.10 b
"""

mat=Matrix([[1,2,1,0,0],[1,1,0,1,1],[1,0,0,1,1]])
mat.transpose()
(mat.transpose()).rref()

"""The RREF of the matrix shows that there is a pivot in every column, so it shows that the set of vectors is linearly independent

### 2.17
"""

mat=Matrix([[3,2,1],[1,1,1],[1,0,-3],[2,3,1]])
mat.rank()
mat.rref()

"""The rank function says that the rank is 3. Likewise the RREF has 3 pivots which also tells us the rank is 3.The kernel of the transformation is the null space of the matrix of the linear transformation. There are no free variables so the linear transformation has kernel = {0}. This is also equivalent to the linear transformation being one-to-one or injective. dim of the image of a linear transformation is the rank of the matrix of the linear transformation, so is 3.

### 2.19
"""

B=Matrix([[1,1,1],[1,2,1],[1,0,0]]).transpose()
A=Matrix([[1,1,0],[1,-1,0],[1,1,1]])
B.inv()*A*B

"""Since B is the matrix that transforms from the B basis to the standard basis and A is the matrix of the transformation from the standard basis to the standard basis, B^{-1} A B is the matrix of the linear transformation in the B basis.

### 2.20

b)
"""

A=Matrix([[2,-1],[1,-1]])
B=Matrix([[2,1],[-2,1]])
A.inv()*B

"""This is the matrix P1 that preforms the basis change from B' to B.

c)
"""

C=Matrix([[1,0,1],[2,-1,0],[-1,2,-1]])
C.det()

"""The determinant is 4 which is not zero therefore C is a basis of R3."""

D=Matrix([[1,0,0],[0,1,0],[0,0,1]])
D.inv() * C

"""This is the matrix p2 that preforms the basis change from C to C'

F)
"""

A=Matrix([[1,0,1],[2,-1,0],[-1,2,-1]])
B=Matrix([[1,-1],[0,1],[2,-1]])
C=Matrix([[4,0],[6,-1]])
V=Matrix([[2],[3]])
A*B*C*V

"""This is the result of applying various matrix tranformation from B' to C' with the coordinates [2,3]^T"""

B = Matrix([[0,1,-3,-1],[-1,-3,4,-3],[2,1,1,5],[0,-1,2,0],[2,2,1,7]])
B.transpose()
B.transpose() * B
x = Matrix([[-1],[-9],[-1],[4],[1]])
x
B.transpose() * x
A= Matrix([[0,-1,2,0,2,9],[1,-3,1,-1,2,23],[-3,4,1,2,1,-25],[-1,-3,5,0,7,30]])
A.rref()
c= Matrix([[-19/6],[-26/3],[1/6],[0]])
B *c

A = Matrix([[0],[5],[4]])
b = Matrix([[3],[2],[0]])
c = Matrix([[6],[5],[4]])
x= A - ((28/13)* b)
x

"""### Test 1

# 1.
"""

#@title
A = Matrix([[-1,-1],[8,7]])
A
B = Matrix([[1,1],[2,1]])
B
B.inv() * A
A.inv() * B

"""# 2."""

A= Matrix([[1,-2],[1,0],[0,1]])
A
B = A.transpose() * A
B
B = B.inv()
B
p= A * B
p
p = p * A.transpose()
p

A = Matrix([[0,1,1],[1,0,1],[1,1,0]])
A
A.eigenvals()
A.eigenvects()

"""# 3"""

U = Matrix([[-2],[1],[1],[0]])
V= Matrix([[0],[0],[-1],[1]])
A = (V.dot(U))/(U.dot(U))
A
W = V - (A * U)
W
U.dot(W)
U.normalized()
W.norm()
W.normalized()

A = Matrix([[-2,0,2,0],[0,-4,-2,0],[2,-2,-3,0]])
 A.rref()

"""# 4"""

A = Matrix([[1,0,2],[0,-1,-2],[2,-2,0]])
A
A.eigenvals()
A.eigenvects()
V1 = Matrix([[1],[-1/2],[1]])
V1
V2 = Matrix([[-2],[-2],[1]])
V2
V3= Matrix([[-1/2],[1],[1]])
V3
V1.dot(V2)
V1.dot(V3)
V2.dot(V1)
V2.dot(V3)
V3.dot(V1)
V3.dot(V2)
V1.normalized()
V2.normalized()
V3.normalized()
P = Matrix([[(2/3),(-2/3),(-1/3)],[-1/3,-2/3,2/3],[2/3,1/3,2/3]])
B= P.inv()
C= P.transpose()
if C == B:
  print("Yes")
B * A *  P

"""# 4.5"""

A = Matrix([[1,0],[0,1]])
A
A.diagonalize()
B = Matrix([[1,0],[0,0]])
B
B.diagonalize()
C = Matrix([[1,1],[0,1]])
C
#C.diagonalize()
D = Matrix([[0,1],[0,0]])
D
#D.diagonalize()

"""# 4.8"""

A = Matrix([[3,2,2],[2,3,-2]])
A
B= A.transpose() * A
B
B.eigenvals()
B.eigenvects()
V1 = Matrix([[1],[1],[0]])
V1.norm()
V1= (1/sqrt(2)) * V1
V1.normalized()
V1
V2 = Matrix([[1/4],[-1/4],[1]])
V2.norm()
V2= (sqrt(8)/3) * V2
V2.normalized()
V2
V3 = Matrix([[-2],[2],[1]])
V3 = (1/3) * V3
V3
V = Matrix([[1/(sqrt(2)),(sqrt(8)/12),(-2/3)],[1/(sqrt(2)),(-sqrt(8)/12),(2/3)],[0,(sqrt(8)/3),(1/3)]])
V
U1= A * V1
U1 = (1/5) * U1
U1
U2 = A * V2
U2 = (1/3) * U2
U2
U = Matrix([[1/(sqrt(2)),1/(sqrt(2))],[1/(sqrt(2)),-1/(sqrt(2))]])
U
S = Matrix([[5,0,0],[0,3,0]])
S
U * S * V.transpose()

"""# 4.9"""

A = Matrix ([[2,2],[-1,1]])
A
B= A.transpose() * A
B
B.eigenvals()
B.eigenvects()
V1 = Matrix([[1/(sqrt(2))],[1/(sqrt(2))]])
V1
V2 = Matrix([[-1/(sqrt(2))],[1/(sqrt(2))]])
V2
V = Matrix([[1/(sqrt(2)),-1/(sqrt(2))],[1/(sqrt(2)),1/(sqrt(2))]])
V
U1 = A * V1
U1 = (1/(sqrt(8))) * U1
U1
U2 = A * V2
U2 = (1/sqrt(2)) * U2
U2
U = Matrix([[1,0],[0,1]])
U
S = Matrix([[sqrt(8),0],[0,sqrt(2)]])
S
U * S * V.transpose()

"""# 4.10"""

A = Matrix([[3,2,2],[2,3,-2]])
A
A.rank()
U1 = Matrix([[1/(sqrt(2))],[1/(sqrt(2))]])
U1
V1 = Matrix([[1/(sqrt(2))],[1/(sqrt(2))],[0]])
V1.transpose()
A1 = U1 * V1.transpose()
A1
U2 = Matrix([[1/(sqrt(2))],[-1/(sqrt(2))]])
U2
V2 = Matrix([[(sqrt(8)/12)],[(-sqrt(8)/12)],[(sqrt(8)/3)]])
V2.transpose()
A2 = U2 * V2.transpose()
A2
AR2 = (5 * A1) + (3 * A2)
AR2